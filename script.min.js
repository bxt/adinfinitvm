// Generated by CoffeeScript 1.10.0
(function() {
  var DIRECTIONS, Grid, GridView, Square, SquareDesign, SquareView, config, gridParts, gridView, myGrid, solution, x, y,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DIRECTIONS = [[0, -1], [1, 0], [0, 1], [-1, 0]];

  Grid = (function() {
    function Grid(w, h, gridParts1) {
      this.w = w;
      this.h = h;
      this.gridParts = gridParts1;
    }

    Grid.prototype.getAt = function(x, y) {
      var ref;
      return ((ref = this.gridParts[y]) != null ? ref[x] : void 0) || new Square(0);
    };

    Grid.prototype.getAtToQuad = function(x, y, quad) {
      var offset;
      offset = DIRECTIONS[quad];
      return this.getAt(x + offset[0], y + offset[1]);
    };

    Grid.prototype.checkAll = function() {
      var i, j, k, quad, ref, ref1, square, x, y;
      for (x = i = 0, ref = this.w; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        for (y = j = 0, ref1 = this.h; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
          square = this.getAt(x, y);
          for (quad = k = 0; k < 4; quad = ++k) {
            if (!square.checkMatch(this.getAtToQuad(x, y, quad), quad)) {
              return false;
            }
          }
        }
      }
      return true;
    };

    return Grid;

  })();

  GridView = (function() {
    function GridView(grid) {
      var i, j, ref, ref1, row, squareView, x, y;
      this.grid = grid;
      this.keydown = bind(this.keydown, this);
      this.clicked = bind(this.clicked, this);
      this.dom = document.createElement('div');
      this.dom.classList.add('grid');
      this.dom.addEventListener('click', this.clicked);
      for (y = i = 0, ref = this.grid.h; 0 <= ref ? i < ref : i > ref; y = 0 <= ref ? ++i : --i) {
        row = document.createElement('div');
        row.classList.add('grid-row');
        for (x = j = 0, ref1 = this.grid.w; 0 <= ref1 ? j < ref1 : j > ref1; x = 0 <= ref1 ? ++j : --j) {
          squareView = new SquareView(this.grid.getAt(x, y));
          squareView.addTo(row);
        }
        this.dom.appendChild(row);
      }
      document.addEventListener('keydown', this.keydown);
    }

    GridView.prototype.clicked = function() {
      return console.log("done?", this.grid.checkAll());
    };

    GridView.prototype.keydown = function(event) {
      var pos, ref, res;
      return (ref = ((function() {
        try {
          switch (event.keyCode) {
            case 37:
              return document.activeElement.previousSibling || document.activeElement.parentNode.previousSibling.lastChild;
            case 38:
              res = document.activeElement.parentNode.previousSibling.firstChild;
              pos = document.activeElement.previousSibling;
              while (pos) {
                pos = pos.previousSibling;
                res = res.nextSibling;
              }
              return res;
            case 39:
              return document.activeElement.nextSibling || document.activeElement.parentNode.nextSibling.firstChild;
            case 40:
              res = document.activeElement.parentNode.nextSibling.firstChild;
              pos = document.activeElement.previousSibling;
              while (pos) {
                pos = pos.previousSibling;
                res = res.nextSibling;
              }
              return res;
          }
        } catch (undefined) {}
      })())) != null ? ref.focus() : void 0;
    };

    GridView.prototype.addTo = function(parent) {
      return parent.appendChild(this.dom);
    };

    return GridView;

  })();

  Square = (function() {
    function Square(id1) {
      this.id = id1;
    }

    Square.prototype.setId = function(id) {
      this.id = id;
      return this;
    };

    Square.prototype.rotate = function(n) {
      var newId;
      newId = this.id >> 4 - n | this.id << n & 15;
      return this.setId(newId);
    };

    Square.prototype.getQuad = function(quad) {
      return this.id >> quad & 1;
    };

    Square.prototype.setQuad = function(quad) {
      this.id |= 1 << quad;
      return this;
    };

    Square.prototype.unsetQuad = function(quad) {
      this.id &= ~(1 << quad);
      return this;
    };

    Square.prototype.clone = function() {
      return new Square(this.id);
    };

    Square.prototype.checkMatch = function(other, quad) {
      var o;
      o = other.clone().rotate(2);
      return this.getQuad(quad) === o.getQuad(quad);
    };

    return Square;

  })();

  SquareDesign = (function() {
    function SquareDesign(square1, size) {
      this.square = square1;
      this.size = size;
      this.loadDesigns;
    }

    SquareDesign.prototype.addTo = function(parent) {
      return parent.innerHTML = this.square.id;
    };

    SquareDesign.prototype.loadDesigns = function() {};

    return SquareDesign;

  })();

  SquareView = (function() {
    function SquareView(square1) {
      this.square = square1;
      this.clicked = bind(this.clicked, this);
      this.dom = document.createElement('a');
      this.dom.href = 'javascript:;';
      this.dom.addEventListener('click', this.clicked);
      this.refreshDom();
    }

    SquareView.prototype.addTo = function(parent) {
      return parent.appendChild(this.dom);
    };

    SquareView.prototype.clicked = function(event) {
      this.square.rotate(1);
      this.refreshDom();
      this.dom.style.transform = 'rotate(-90deg)';
      this.dom.offsetHeight;
      this.dom.classList.add('transitioning');
      return this.dom.style.transform = 'rotate(0deg)';
    };

    SquareView.prototype.refreshDom = function() {
      new SquareDesign(this.square, 32).addTo(this.dom);
      this.dom.className = 'grid-square';
      return this.dom.classList.add("grid-square-" + this.square.id);
    };

    return SquareView;

  })();

  config = [4, 6, 10, 10, 12, 1, 5, 6, 14, 9, 6, 13, 5, 1, 0, 7, 11, 13, 2, 1, 5, 4, 5, 6, 12, 7, 14, 15, 6, 8, 7, 6, 14, 11, 13, 5, 5, 2, 3, 13, 1, 3, 8, 3, 9];

  solution = [4, 6, 10, 10, 12, 1, 5, 6, 14, 9, 6, 13, 5, 1, 0, 7, 11, 13, 4, 4, 5, 4, 5, 3, 9, 7, 11, 15, 12, 4, 7, 12, 7, 11, 13, 5, 5, 1, 6, 13, 1, 3, 8, 3, 9];

  gridParts = (function() {
    var i, results;
    results = [];
    for (y = i = 0; i < 9; y = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (x = j = 0; j < 5; x = ++j) {
          results1.push(new Square(config[x + y * 5]));
        }
        return results1;
      })());
    }
    return results;
  })();

  myGrid = new Grid(5, 9, gridParts);

  gridView = new GridView(myGrid);

  gridView.addTo(document.getElementById('jscontainer'));

  console.log(gridView);

}).call(this);
