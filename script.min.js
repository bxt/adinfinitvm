// Generated by CoffeeScript 1.10.0
(function() {
  var App, BitSet, Button, Component, DIRECTIONS, Grid, GridView, Header, Instructions, Levels, PathySquareDesigns, Solver, Square, SquareDesigns, SquareView, TriangularSquareDesigns, app,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  BitSet = function(size) {
    return (function() {
      var filter, map;

      _Class.size = size;

      _Class.allId = (1 << size) - 1;

      function _Class(id1) {
        this.id = id1 != null ? id1 : 0;
      }

      _Class.prototype.setId = function(id) {
        this.id = id;
        return this;
      };

      _Class.prototype.has = function(at) {
        return this.id >> at % size & 1;
      };

      _Class.prototype.add = function(at) {
        this.id |= 1 << at % size;
        return this;
      };

      _Class.prototype.remove = function(at) {
        this.id &= ~(1 << at % size);
        return this;
      };

      _Class.prototype.clear = function() {
        return this.setId(0);
      };

      map = function(cb) {
        var i, j, ref, results;
        results = [];
        for (i = j = 0, ref = size; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if (this.has(i)) {
            results.push(cb(i));
          }
        }
        return results;
      };

      filter = function(cb) {
        var i, j, ref;
        for (i = j = 0, ref = size; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if (this.has(i)) {
            if (!cb(i)) {
              this.remove(i);
            }
          }
        }
        return this;
      };

      _Class.prototype.rotate = function(n) {
        var newId;
        newId = this.id >> this.constructor.size - n | this.id << n & this.constructor.allId;
        return this.setId(newId);
      };

      _Class.prototype.clone = function() {
        return new this.constructor(this.id);
      };

      return _Class;

    })();
  };

  Square = (function(superClass) {
    extend(Square, superClass);

    function Square() {
      return Square.__super__.constructor.apply(this, arguments);
    }

    Square.prototype.getQuad = function(quad) {
      return this.has(quad);
    };

    Square.prototype.setQuad = function(quad) {
      return this.add(quad);
    };

    Square.prototype.checkMatch = function(other, quad) {
      var o;
      o = other.clone().rotate(2);
      return this.getQuad(quad) === o.getQuad(quad);
    };

    return Square;

  })(BitSet(4));

  SquareDesigns = (function() {
    function SquareDesigns(size1, width) {
      this.size = size1;
      this.width = width;
      this.halfSize = this.size / 2;
      this.circleRadius = this.size * 7 / 32;
      this.loadDesigns();
    }

    SquareDesigns.prototype.setSquare = function(square) {
      this.square = square;
      return this;
    };

    SquareDesigns.prototype.addTo = function(parent) {
      return parent.innerHTML = this.designs[this.square.id];
    };

    SquareDesigns.prototype.loadDesigns = function() {
      var i;
      return this.designs = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j < 16; i = ++j) {
          results.push("" + i);
        }
        return results;
      })();
    };

    SquareDesigns.prototype.layout = function(content) {
      return "<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"" + this.size + "\"\n  height=\"" + this.size + "\"\n  viewBox=\"0 0 " + this.size + " " + this.size + "\">\n  " + content + "\n</svg>";
    };

    return SquareDesigns;

  })();

  TriangularSquareDesigns = (function(superClass) {
    extend(TriangularSquareDesigns, superClass);

    function TriangularSquareDesigns() {
      return TriangularSquareDesigns.__super__.constructor.apply(this, arguments);
    }

    TriangularSquareDesigns.prototype.loadDesigns = function() {
      var i, j, k, path, paths, results;
      TriangularSquareDesigns.__super__.loadDesigns.call(this);
      this.paths = {
        1: "M0 0 L" + this.halfSize + " " + this.halfSize + " L" + this.size + " 0 Z",
        2: "M" + this.size + " 0 L" + this.halfSize + " " + this.halfSize + " L" + this.size + " " + this.size + " Z",
        4: "M" + this.size + " " + this.size + " L" + this.halfSize + " " + this.halfSize + " L0 " + this.size + " Z",
        8: "M0 " + this.size + " L" + this.halfSize + " " + this.halfSize + " L0 0 Z"
      };
      results = [];
      for (i = j = 0; j < 16; i = ++j) {
        paths = (function() {
          var ref, results1;
          ref = this.paths;
          results1 = [];
          for (k in ref) {
            path = ref[k];
            if ((i & k) > 0) {
              results1.push("<path d=\"" + path + "\" " + (this.style()) + " />");
            }
          }
          return results1;
        }).call(this);
        results.push(this.designs[i] = this.layout(paths.join('paths')));
      }
      return results;
    };

    TriangularSquareDesigns.prototype.style = function(plus) {
      return "class=\"filled\"";
    };

    return TriangularSquareDesigns;

  })(SquareDesigns);

  PathySquareDesigns = (function(superClass) {
    extend(PathySquareDesigns, superClass);

    function PathySquareDesigns() {
      return PathySquareDesigns.__super__.constructor.apply(this, arguments);
    }

    PathySquareDesigns.prototype.loadDesigns = function() {
      PathySquareDesigns.__super__.loadDesigns.call(this);
      this.loadPaths();
      this.load0Designs();
      this.load1Designs();
      this.load2Designs();
      this.load3Designs();
      return this.load4Designs();
    };

    PathySquareDesigns.prototype.loadPaths = function() {
      return this.paths = {
        1: "M" + this.halfSize + "        0 L" + this.halfSize + " " + (this.halfSize - this.circleRadius),
        2: "M" + this.size + " " + this.halfSize + " L" + (this.halfSize + this.circleRadius) + " " + this.halfSize,
        4: "M" + this.halfSize + " " + this.size + " L" + this.halfSize + " " + (this.halfSize + this.circleRadius),
        8: "M       0 " + this.halfSize + " L" + (this.halfSize - this.circleRadius) + " " + this.halfSize,
        5: "M" + this.halfSize + " 0 L" + this.halfSize + " " + this.size,
        10: "M0 " + this.halfSize + " L" + this.size + " " + this.halfSize,
        3: "M" + this.halfSize + "        0 A " + this.halfSize + " " + this.halfSize + " 0 0 0 " + this.size + " " + this.halfSize,
        6: "M" + this.halfSize + " " + this.size + " A " + this.halfSize + " " + this.halfSize + " 0 0 1 " + this.size + " " + this.halfSize,
        9: "M" + this.halfSize + "        0 A " + this.halfSize + " " + this.halfSize + " 0 0 1        0 " + this.halfSize,
        12: "M" + this.halfSize + " " + this.size + " A " + this.halfSize + " " + this.halfSize + " 0 0 0        0 " + this.halfSize
      };
    };

    PathySquareDesigns.prototype.load0Designs = function() {
      return this.designs[0] = this.layout("");
    };

    PathySquareDesigns.prototype.load1Designs = function() {
      var i, j, len, ref, results;
      ref = [1, 2, 4, 8];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.designs[i] = this.layout("<path d=\"" + this.paths[i] + "\" " + (this.styleWhite()) + " />\n<circle cx=\"" + this.halfSize + "\" cy=\"" + this.halfSize + "\" r=\"" + this.circleRadius + "\" " + (this.styleWhite()) + " />\n<path d=\"" + this.paths[i] + "\" " + (this.style()) + " />\n<circle cx=\"" + this.halfSize + "\" cy=\"" + this.halfSize + "\" r=\"" + this.circleRadius + "\" " + (this.style()) + " />"));
      }
      return results;
    };

    PathySquareDesigns.prototype.load2Designs = function() {
      var i, j, len, ref, results;
      ref = [5, 10, 3, 6, 9, 12];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.designs[i] = this.layout("<path d=\"" + this.paths[i] + "\" " + (this.styleWhite()) + " />\n<path d=\"" + this.paths[i] + "\" " + (this.style()) + " />"));
      }
      return results;
    };

    PathySquareDesigns.prototype.load3Designs = function() {
      var i, j, k, len, paths, ref, results;
      ref = [7, 11, 13, 14];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        paths = (function() {
          var l, len1, ref1, results1;
          ref1 = [3, 6, 9, 12];
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            k = ref1[l];
            if (!(i & k ^ k)) {
              results1.push("<path d=\"" + this.paths[k] + "\" " + (this.styleWhite()) + " />\n<path d=\"" + this.paths[k] + "\" " + (this.style()) + " />");
            }
          }
          return results1;
        }).call(this);
        results.push(this.designs[i] = this.layout(paths.join('')));
      }
      return results;
    };

    PathySquareDesigns.prototype.load4Designs = function() {
      var additionalPath, k, paths, strokeLength;
      paths = (function() {
        var j, len, ref, results;
        ref = [3, 6, 12, 9];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          k = ref[j];
          results.push("<path d=\"" + this.paths[k] + "\" " + (this.styleWhite()) + " />\n<path d=\"" + this.paths[k] + "\" " + (this.style()) + " />");
        }
        return results;
      }).call(this);
      strokeLength = this.halfSize * Math.PI / 4;
      additionalPath = "<path d=\"" + this.paths[3] + "\" " + (this.styleWhite("stroke-dasharray: " + (strokeLength - 1) + "px, " + (strokeLength + 1) + "px;")) + "/>\n<path d=\"" + this.paths[3] + "\" " + (this.style("stroke-dasharray: " + strokeLength + "px;")) + "/>";
      return this.designs[15] = this.layout(paths.join('') + additionalPath);
    };

    PathySquareDesigns.prototype.style = function(plus) {
      return "class=\"foreground\" style=\"fill: none; stroke-width: " + this.width + "px; " + plus + "\"";
    };

    PathySquareDesigns.prototype.styleWhite = function(plus) {
      return "class=\"background\" style=\"fill: none; stroke-width: " + (this.width * 8 / 6) + "px; " + plus + "\"";
    };

    return PathySquareDesigns;

  })(SquareDesigns);

  Component = (function() {
    function Component(elementType) {
      this.dom = document.createElement(elementType);
    }

    Component.prototype.add = function(component) {
      return component.addTo(this.dom);
    };

    Component.prototype.addTo = function(parent) {
      return parent.appendChild(this.dom);
    };

    Component.prototype.remove = function() {
      return this.dom.parentNode.removeChild(this.dom);
    };

    return Component;

  })();

  Button = (function(superClass) {
    extend(Button, superClass);

    function Button(bubble) {
      if (bubble == null) {
        bubble = true;
      }
      this.clickHandler = bind(this.clickHandler, this);
      Button.__super__.constructor.call(this, 'a');
      this.dom.href = 'javascript:;';
      this.dom.addEventListener('click', this.clickHandler, !bubble);
    }

    Button.prototype.clickHandler = function(event) {
      return this.clicked(event);
    };

    return Button;

  })(Component);

  SquareView = (function(superClass) {
    extend(SquareView, superClass);

    function SquareView(square1, squareDesigns1) {
      this.square = square1;
      this.squareDesigns = squareDesigns1;
      this.clicked = bind(this.clicked, this);
      SquareView.__super__.constructor.call(this);
      this.refreshDom();
    }

    SquareView.prototype.freeze = function() {
      return this.frozen = true;
    };

    SquareView.prototype.changeSquareDesigns = function(squareDesigns) {
      this.squareDesigns = squareDesigns;
      return this.refreshDom();
    };

    SquareView.prototype.clicked = function(event) {
      if (!this.frozen) {
        this.square.rotate(1);
        this.refreshDom();
        this.dom.style.transform = 'rotate(-90deg)';
        this.dom.offsetHeight;
        this.dom.classList.add('transitioning');
        return this.dom.style.transform = 'rotate(0deg)';
      }
    };

    SquareView.prototype.refreshDom = function() {
      this.add(this.squareDesigns.setSquare(this.square));
      this.dom.className = 'grid-square';
      return this.dom.classList.add("grid-square-" + this.square.id);
    };

    return SquareView;

  })(Button);

  DIRECTIONS = [[0, -1], [1, 0], [0, 1], [-1, 0]];

  Grid = (function() {
    function Grid(w1, h1, gridParts1) {
      this.w = w1;
      this.h = h1;
      this.gridParts = gridParts1;
    }

    Grid.prototype.getAt = function(x, y) {
      var ref;
      return ((ref = this.gridParts[y]) != null ? ref[x] : void 0) || new Square(0);
    };

    Grid.prototype.getAtToQuad = function(x, y, quad) {
      var offset;
      offset = DIRECTIONS[quad];
      return this.getAt(x + offset[0], y + offset[1]);
    };

    Grid.prototype.checkAll = function() {
      var j, l, p, quad, ref, ref1, square, x, y;
      for (x = j = 0, ref = this.w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = this.h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          square = this.getAt(x, y);
          for (quad = p = 0; p < 4; quad = ++p) {
            if (!square.checkMatch(this.getAtToQuad(x, y, quad), quad)) {
              return false;
            }
          }
        }
      }
      return true;
    };

    return Grid;

  })();

  GridView = (function(superClass) {
    var squareDesigns;

    extend(GridView, superClass);

    squareDesigns = [new PathySquareDesigns(40, 6), new TriangularSquareDesigns(40, 6)];

    function GridView(grid1) {
      this.grid = grid1;
      this.isDone = bind(this.isDone, this);
      this.designIndex = localStorage.getItem('adinfinitvm.designIndex') * 1;
      GridView.__super__.constructor.call(this, 'div');
      this.dom.classList.add('grid');
      this.initializeGrid();
      this.dom.addEventListener('keydown', this.keydown);
    }

    GridView.prototype.initializeGrid = function() {
      var j, l, ref, ref1, row, squareView, x, y;
      this.squareViews = [];
      this.dom.innerHTML = '';
      for (y = j = 0, ref = this.grid.h; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
        row = document.createElement('div');
        row.classList.add('grid-row');
        for (x = l = 0, ref1 = this.grid.w; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
          squareView = new SquareView(this.grid.getAt(x, y), this.squareDesigns());
          this.squareViews.push(squareView);
          squareView.addTo(row);
        }
        this.dom.appendChild(row);
      }
    };

    GridView.prototype.freeze = function() {
      var j, len, ref, results, squareView;
      ref = this.squareViews;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        squareView = ref[j];
        results.push(squareView.freeze());
      }
      return results;
    };

    GridView.prototype.changeSquareDesigns = function() {
      var j, len, ref, results, squareView;
      this.designIndex = (this.designIndex + 1) % squareDesigns.length;
      localStorage.setItem('adinfinitvm.designIndex', this.designIndex);
      ref = this.squareViews;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        squareView = ref[j];
        results.push(squareView.changeSquareDesigns(this.squareDesigns()));
      }
      return results;
    };

    GridView.prototype.squareDesigns = function() {
      return squareDesigns[this.designIndex];
    };

    GridView.prototype.isDone = function() {
      return this.grid.checkAll();
    };

    GridView.prototype.keydown = function(event) {
      var pos, ref, res;
      return (ref = ((function() {
        try {
          switch (event.keyCode) {
            case 37:
              return document.activeElement.previousSibling || document.activeElement.parentNode.previousSibling.lastChild;
            case 38:
              res = document.activeElement.parentNode.previousSibling.firstChild;
              pos = document.activeElement.previousSibling;
              while (pos) {
                pos = pos.previousSibling;
                res = res.nextSibling;
              }
              return res;
            case 39:
              return document.activeElement.nextSibling || document.activeElement.parentNode.nextSibling.firstChild;
            case 40:
              res = document.activeElement.parentNode.nextSibling.firstChild;
              pos = document.activeElement.previousSibling;
              while (pos) {
                pos = pos.previousSibling;
                res = res.nextSibling;
              }
              return res;
          }
        } catch (undefined) {}
      })())) != null ? ref.focus() : void 0;
    };

    return GridView;

  })(Component);

  Levels = (function() {
    var fixedLevels, generateLevel, makeGrid, rand, seedRandom, shuffle;

    function Levels() {}

    Levels.prototype.get = function(level) {
      return fixedLevels[level] || shuffle(this.generateLevel(level));
    };

    Levels.prototype.generateLevel = function(level) {
      var density, h, random, spareRandomness, symmetric, symmetricDensity, w;
      random = seedRandom(level + 1);
      spareRandomness = random();
      switch (false) {
        case !(level < 20):
          w = [3, 3];
          h = [5, 7];
          break;
        case !(level < 50):
          w = [6, 7];
          h = [6, 7];
          break;
        case !(level < 100):
          w = [6, 7];
          h = [6, 8];
          break;
        case !(level < 200):
          w = [7, 12];
          h = [7, 9];
          break;
        default:
          w = [9, 15];
          h = [9, 9];
      }
      density = 0.5;
      symmetricDensity = (function() {
        switch (false) {
          case !(level < 20):
            return 0.1;
          case !(level < 30):
            return 0.9;
          default:
            return Math.min(10 / level, 0.05);
        }
      })();
      symmetric = random() < symmetricDensity;
      return generateLevel(w, h, density, symmetric, random);
    };

    generateLevel = function(wRange, hRange, density, symmetric, random) {
      var antiX, antiquad, grid, h, j, l, len, p, quad, quads, ref, ref1, w, x, y;
      if (random == null) {
        random = Math.random;
      }
      if (symmetric) {
        density = density / 2;
      }
      w = rand.apply(null, slice.call(wRange).concat([random]));
      h = rand.apply(null, slice.call(hRange).concat([random]));
      grid = makeGrid(w, h, (function() {
        var j, ref, results;
        results = [];
        for (x = j = 0, ref = w * h; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
          results.push(0);
        }
        return results;
      })());
      for (x = j = 0, ref = w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          quads = [];
          if (x !== w - 1) {
            quads.push(1);
          }
          if (y !== h - 1) {
            quads.push(2);
          }
          for (p = 0, len = quads.length; p < len; p++) {
            quad = quads[p];
            if (random() < density) {
              antiquad = quad + 2 & 3;
              grid.getAt(x, y).setQuad(quad);
              grid.getAtToQuad(x, y, quad).setQuad(antiquad);
              if (symmetric) {
                antiX = w - x - 1;
                if (quad === 1) {
                  grid.getAt(antiX, y).setQuad(antiquad);
                  grid.getAtToQuad(antiX, y, antiquad).setQuad(quad);
                } else {
                  grid.getAt(antiX, y).setQuad(quad);
                  grid.getAtToQuad(antiX, y, quad).setQuad(antiquad);
                }
              }
            }
          }
        }
      }
      return grid;
    };

    seedRandom = function(seed) {
      return function() {
        seed = Math.sin(seed) * 1000000;
        return seed - Math.floor(seed);
      };
    };

    rand = function(from, to, random) {
      if (random == null) {
        random = Math.random;
      }
      return Math.floor(random() * (to - from) + from);
    };

    makeGrid = function(w, h, values) {
      var gridParts, myGrid, x, y;
      gridParts = (function() {
        var j, ref, results;
        results = [];
        for (y = j = 0, ref = h; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (x = l = 0, ref1 = w; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
              results1.push(new Square(values[x + y * w]));
            }
            return results1;
          })());
        }
        return results;
      })();
      return myGrid = new Grid(w, h, gridParts);
    };

    shuffle = function(grid) {
      var j, l, ref, ref1, x, y;
      for (x = j = 0, ref = grid.w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = grid.h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          grid.getAt(x, y).rotate(rand(0, 4));
        }
      }
      return grid;
    };

    fixedLevels = {
      0: makeGrid(2, 1, [1, 8]),
      1: makeGrid(2, 2, [1, 12, 0, 1]),
      2: makeGrid(3, 2, [6, 14, 12, 3, 14, 9]),
      3: makeGrid(4, 2, [9, 12, 6, 12, 3, 9, 3, 6]),
      4: shuffle(makeGrid(3, 2, [1, 10, 2, 8, 5, 4])),
      5: makeGrid(3, 3, [9, 11, 3, 13, 15, 7, 12, 14, 6]),
      6: shuffle(makeGrid(4, 5, [0, 6, 12, 0, 0, 5, 5, 0, 0, 5, 5, 0, 6, 13, 7, 12, 3, 9, 3, 9])),
      7: shuffle(makeGrid(3, 3, [0, 0, 4, 2, 12, 5, 0, 3, 9])),
      8: makeGrid(6, 4, [0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 0]),
      9: shuffle(makeGrid(4, 4, [6, 10, 14, 12, 7, 14, 13, 5, 5, 7, 11, 13, 3, 11, 10, 9])),
      10: shuffle(makeGrid(6, 4, [0, 6, 12, 6, 12, 0, 0, 5, 7, 13, 5, 0, 0, 3, 13, 7, 9, 0, 2, 8, 3, 9, 2, 8])),
      13: shuffle(makeGrid(4, 5, [0, 6, 12, 0, 4, 7, 13, 4, 3, 13, 7, 9, 6, 11, 11, 12, 3, 10, 10, 9])),
      15: shuffle(makeGrid(5, 5, [6, 10, 14, 14, 12, 7, 10, 13, 5, 5, 7, 14, 15, 11, 13, 5, 5, 7, 10, 13, 3, 11, 11, 10, 9])),
      19: shuffle(makeGrid(6, 6, [0, 0, 6, 12, 0, 0, 0, 4, 5, 7, 8, 0, 6, 11, 15, 15, 10, 12, 3, 10, 15, 15, 14, 9, 0, 2, 13, 5, 1, 0, 0, 0, 3, 9, 0, 0])),
      21: shuffle(makeGrid(6, 6, [0, 0, 6, 12, 0, 0, 0, 4, 7, 13, 4, 0, 6, 11, 15, 15, 11, 12, 3, 14, 15, 15, 14, 9, 0, 1, 7, 13, 1, 0, 0, 0, 3, 9, 0, 0])),
      25: shuffle(makeGrid(7, 6, [0, 0, 6, 10, 10, 10, 12, 6, 10, 11, 12, 0, 0, 5, 5, 6, 12, 5, 6, 12, 5, 5, 3, 9, 5, 3, 9, 5, 5, 0, 0, 3, 14, 10, 9, 3, 10, 10, 10, 9, 0, 0])),
      28: shuffle(makeGrid(8, 5, [0, 0, 0, 6, 12, 0, 0, 0, 0, 0, 6, 11, 11, 12, 0, 0, 0, 6, 11, 10, 10, 11, 12, 0, 6, 11, 10, 10, 10, 10, 11, 12, 3, 10, 10, 10, 10, 10, 10, 9])),
      33: shuffle(makeGrid(8, 6, [4, 4, 6, 10, 10, 10, 10, 12, 5, 5, 5, 6, 10, 10, 12, 5, 5, 5, 5, 1, 2, 12, 5, 5, 5, 5, 3, 8, 4, 5, 5, 5, 5, 3, 10, 10, 9, 5, 5, 5, 3, 10, 10, 10, 10, 9, 1, 1])),
      42: shuffle(makeGrid(6, 5, [4, 0, 4, 6, 10, 12, 5, 0, 5, 1, 0, 5, 3, 10, 13, 6, 10, 9, 0, 0, 5, 5, 0, 4, 0, 0, 1, 3, 10, 9])),
      100: shuffle(makeGrid(5, 3, [4, 6, 12, 6, 12, 5, 5, 5, 5, 5, 1, 3, 9, 3, 9]))
    };

    return Levels;

  })();

  Solver = (function(superClass) {
    extend(Solver, superClass);

    function Solver(main) {
      this.main = main;
      this.clicked = bind(this.clicked, this);
      Solver.__super__.constructor.call(this);
      this.dom.innerHTML = '?';
      this.dom.className = 'button solver';
    }

    Solver.prototype.clicked = function(event) {
      var counter, i, j, l, len, p, post, pre, ref, ref1, ref2, results, sV, square, x, y;
      console.log("hm?", this);
      counter = 0;
      while (!this.grid().checkAll()) {
        pre = this.pad(counter.toString(4));
        counter = counter + 1;
        post = this.pad(counter.toString(4));
        for (x = j = 0, ref = this.grid().w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
          for (y = l = 0, ref1 = this.grid().h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
            square = this.grid().getAt(x, y);
            i = y * this.grid().w + x;
            if (pre[i] !== post[i]) {
              square.rotate(1);
            }
          }
        }
      }
      console.log("done.");
      ref2 = this.main.gridView.squareViews;
      results = [];
      for (p = 0, len = ref2.length; p < len; p++) {
        sV = ref2[p];
        results.push(sV.refreshDom());
      }
      return results;
    };

    Solver.prototype.grid = function() {
      return this.main.gridView.grid;
    };

    Solver.prototype.pad = function(string) {
      while (string.length < (this.grid().w * this.grid().h)) {
        string = "0" + string;
      }
      return string;
    };

    return Solver;

  })(Button);

  Instructions = (function() {
    var withDashes;

    withDashes = function(string) {
      return "— " + string + " —";
    };

    function Instructions() {
      this.dom = document.getElementById('instructions');
    }

    Instructions.prototype.start = function(level) {
      return this.setMessage(this.startMessage(level));
    };

    Instructions.prototype.end = function(level) {
      return this.setMessage(this.endMessage(level));
    };

    Instructions.prototype.setMessage = function(m) {
      if (m != null) {
        return this.dom.innerHTML = m;
      }
    };

    Instructions.prototype.startMessage = function(level) {
      switch (level) {
        case 0:
          return null;
        case 1:
          return withDashes("try this one");
        case 2:
          return withDashes("looks nice right? click to bottom center piece to create two rings");
        case 3:
          return withDashes("there may be multiple loops like in this example");
        case 4:
          return "(the game is called ADINFINITVM, okay?)";
        case 5:
          return withDashes("let's see how far you can get");
        case 7:
          return "(hint: there's an alternate mode, hit the ♦ in the bottom right corner)";
        default:
          return "&nbsp;";
      }
    };

    Instructions.prototype.endMessage = function(level) {
      switch (level) {
        case 0:
          return withDashes("now click anywhere to start the next level");
        case 10:
          return withDashes("#10 already, keep up the good work!");
        case 50:
          return withDashes("oh nice! #50");
        case 1337:
          return withDashes("#1337 — 11100010 10011101 10100100");
        default:
          if (("" + level).match(/^[15]0+$/)) {
            return this.tweetMessage(level);
          } else {
            return withDashes("#" + level);
          }
      }
    };

    Instructions.prototype.tweetMessage = function(level) {
      var link, tweet;
      tweet = "I've just completed level " + level + " in @amoebe's #adinfinitvm game! https://bxt.github.io/adinfinitvm/";
      link = "http://twitter.com/home?status=" + (encodeURIComponent(tweet));
      return withDashes("congratulations! you have completed #" + level + ".\n<a class=\"button\" href=\"" + link + "\" target=\"_blank\">tweet</a>");
    };

    return Instructions;

  })();

  Header = (function() {
    function Header() {
      this.dom = document.getElementsByTagName('h2')[0];
    }

    Header.prototype.hide = function() {
      return window.setTimeout((function(_this) {
        return function() {
          _this.dom.style.height = _this.dom.clientHeight + "px";
          _this.dom.offsetHeight;
          return _this.dom.style.height = 0;
        };
      })(this), 1000);
    };

    return Header;

  })();

  App = (function(superClass) {
    var doneClass;

    extend(App, superClass);

    doneClass = 'done';

    function App() {
      this.loadLevel = bind(this.loadLevel, this);
      this.clicked = bind(this.clicked, this);
      App.__super__.constructor.call(this, 'div');
      this.dom.classList.add('app');
      document.addEventListener('click', this.clicked);
      this.levels = new Levels();
      this.level = localStorage.getItem('adinfinitvm.level') * 1;
      this.instructions = new Instructions();
      this.header = new Header();
      this.createDesignChanger();
      this.solver = new Solver(this);
      this.add(this.solver);
      this.loadLevel();
    }

    App.prototype.createDesignChanger = function() {
      this.designChanger = new Button();
      this.designChanger.clicked = (function(_this) {
        return function(event) {
          event.stopPropagation();
          return _this.gridView.changeSquareDesigns();
        };
      })(this);
      this.designChanger.dom.innerHTML = '♦';
      this.designChanger.dom.className = 'button designChanger';
      return this.add(this.designChanger);
    };

    App.prototype.clicked = function() {
      var cL;
      if (this.gridView.isDone()) {
        cL = document.body.classList;
        if (cL.contains(doneClass)) {
          cL.remove('done');
          this.level = this.level + 1;
          return this.loadLevel();
        } else {
          cL.add('done');
          this.gridView.freeze();
          this.instructions.end(this.level);
          return this.persistLevelProgress();
        }
      }
    };

    App.prototype.loadLevel = function() {
      var grid, ref;
      if ((ref = this.gridView) != null) {
        ref.remove();
      }
      grid = this.levels.get(this.level);
      this.gridView = new GridView(grid);
      this.add(this.gridView);
      this.instructions.start(this.level);
      if (this.level >= 4) {
        return this.header.hide();
      }
    };

    App.prototype.persistLevelProgress = function() {
      var level;
      level = localStorage.getItem('adinfinitvm.level');
      if (this.level >= level) {
        return localStorage.setItem('adinfinitvm.level', this.level + 1);
      }
    };

    return App;

  })(Component);

  app = new App();

  app.addTo(document.getElementById('jscontainer'));

}).call(this);
