// Generated by CoffeeScript 1.10.0
(function() {
  var DIRECTIONS, Grid, GridView, Instructions, Levels, Square, SquareDesigns, SquareView, Zoo, zoo,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Square = (function() {
    function Square(id1) {
      this.id = id1;
    }

    Square.prototype.setId = function(id) {
      this.id = id;
      return this;
    };

    Square.prototype.rotate = function(n) {
      var newId;
      newId = this.id >> 4 - n | this.id << n & 15;
      return this.setId(newId);
    };

    Square.prototype.getQuad = function(quad) {
      return this.id >> quad & 1;
    };

    Square.prototype.setQuad = function(quad) {
      this.id |= 1 << quad;
      return this;
    };

    Square.prototype.unsetQuad = function(quad) {
      this.id &= ~(1 << quad);
      return this;
    };

    Square.prototype.clone = function() {
      return new Square(this.id);
    };

    Square.prototype.checkMatch = function(other, quad) {
      var o;
      o = other.clone().rotate(2);
      return this.getQuad(quad) === o.getQuad(quad);
    };

    return Square;

  })();

  SquareDesigns = (function() {
    function SquareDesigns(size, width) {
      this.size = size;
      this.width = width;
      this.halfSize = this.size / 2;
      this.circleRadius = this.size * 7 / 32;
      this.loadDesigns();
    }

    SquareDesigns.prototype.setSquare = function(square) {
      this.square = square;
      return this;
    };

    SquareDesigns.prototype.addTo = function(parent) {
      return parent.innerHTML = this.designs[this.square.id];
    };

    SquareDesigns.prototype.loadDesigns = function() {
      var i;
      this.designs = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j < 16; i = ++j) {
          results.push("" + i);
        }
        return results;
      })();
      this.loadPaths();
      this.load0Designs();
      this.load1Designs();
      this.load2Designs();
      this.load3Designs();
      return this.load4Designs();
    };

    SquareDesigns.prototype.loadPaths = function() {
      return this.paths = {
        1: "M" + this.halfSize + "        0 L" + this.halfSize + " " + (this.halfSize - this.circleRadius),
        2: "M" + this.size + " " + this.halfSize + " L" + (this.halfSize + this.circleRadius) + " " + this.halfSize,
        4: "M" + this.halfSize + " " + this.size + " L" + this.halfSize + " " + (this.halfSize + this.circleRadius),
        8: "M       0 " + this.halfSize + " L" + (this.halfSize - this.circleRadius) + " " + this.halfSize,
        5: "M" + this.halfSize + " 0 L" + this.halfSize + " " + this.size,
        10: "M0 " + this.halfSize + " L" + this.size + " " + this.halfSize,
        3: "M" + this.halfSize + "        0 A " + this.halfSize + " " + this.halfSize + " 0 0 0 " + this.size + " " + this.halfSize,
        6: "M" + this.halfSize + " " + this.size + " A " + this.halfSize + " " + this.halfSize + " 0 0 1 " + this.size + " " + this.halfSize,
        9: "M" + this.halfSize + "        0 A " + this.halfSize + " " + this.halfSize + " 0 0 1        0 " + this.halfSize,
        12: "M" + this.halfSize + " " + this.size + " A " + this.halfSize + " " + this.halfSize + " 0 0 0        0 " + this.halfSize
      };
    };

    SquareDesigns.prototype.load0Designs = function() {
      return this.designs[0] = this.layout("");
    };

    SquareDesigns.prototype.load1Designs = function() {
      var i, j, len, ref, results;
      ref = [1, 2, 4, 8];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.designs[i] = this.layout("<path d=\"" + this.paths[i] + "\" " + (this.styleWhite()) + " />\n<circle cx=\"" + this.halfSize + "\" cy=\"" + this.halfSize + "\" r=\"" + this.circleRadius + "\" " + (this.styleWhite()) + " />\n<path d=\"" + this.paths[i] + "\" " + (this.style()) + " />\n<circle cx=\"" + this.halfSize + "\" cy=\"" + this.halfSize + "\" r=\"" + this.circleRadius + "\" " + (this.style()) + " />"));
      }
      return results;
    };

    SquareDesigns.prototype.load2Designs = function() {
      var i, j, len, ref, results;
      ref = [5, 10, 3, 6, 9, 12];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.designs[i] = this.layout("<path d=\"" + this.paths[i] + "\" " + (this.styleWhite()) + " />\n<path d=\"" + this.paths[i] + "\" " + (this.style()) + " />"));
      }
      return results;
    };

    SquareDesigns.prototype.load3Designs = function() {
      var i, j, k, len, ref, results;
      ref = [7, 11, 13, 14];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.designs[i] = this.layout((function() {
          var l, len1, ref1, results1;
          ref1 = [3, 6, 9, 12];
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            k = ref1[l];
            if (!(i & k ^ k)) {
              results1.push("<path d=\"" + this.paths[k] + "\" " + (this.styleWhite()) + " /><path d=\"" + this.paths[k] + "\" " + (this.style()) + " />");
            }
          }
          return results1;
        }).call(this)));
      }
      return results;
    };

    SquareDesigns.prototype.load4Designs = function() {
      var additionalPath, k, paths, strokeLength;
      paths = (function() {
        var j, len, ref, results;
        ref = [3, 6, 12, 9];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          k = ref[j];
          results.push("<path d=\"" + this.paths[k] + "\" " + (this.styleWhite()) + " /><path d=\"" + this.paths[k] + "\" " + (this.style()) + " />");
        }
        return results;
      }).call(this);
      strokeLength = this.halfSize * Math.PI / 4;
      additionalPath = "<path d=\"" + this.paths[3] + "\" " + (this.styleWhite("stroke-dasharray: " + (strokeLength - 1) + "px, " + (strokeLength + 1) + "px;")) + "/>\n<path d=\"" + this.paths[3] + "\" " + (this.style("stroke-dasharray: " + strokeLength + "px;")) + "/>";
      return this.designs[15] = this.layout(paths + additionalPath);
    };

    SquareDesigns.prototype.layout = function(content) {
      return "<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"" + this.size + "\"\n  height=\"" + this.size + "\"\n  viewBox=\"0 0 " + this.size + " " + this.size + "\">\n  " + content + "\n</svg>";
    };

    SquareDesigns.prototype.style = function(plus) {
      return "class=\"foreground\" style=\"fill: none; stroke-width: " + this.width + "px; " + plus + "\"";
    };

    SquareDesigns.prototype.styleWhite = function(plus) {
      return "class=\"background\" style=\"fill: none; stroke-width: " + (this.width * 8 / 6) + "px; " + plus + "\"";
    };

    return SquareDesigns;

  })();

  SquareView = (function() {
    var squareDesigns;

    squareDesigns = new SquareDesigns(40, 6);

    function SquareView(square1, interactive) {
      this.square = square1;
      this.interactive = interactive;
      this.clicked = bind(this.clicked, this);
      this.dom = document.createElement('a');
      this.dom.href = 'javascript:;';
      if (this.interactive) {
        this.dom.addEventListener('click', this.clicked);
      }
      this.refreshDom();
    }

    SquareView.prototype.addTo = function(parent) {
      return parent.appendChild(this.dom);
    };

    SquareView.prototype.clicked = function(event) {
      this.square.rotate(1);
      this.refreshDom();
      this.dom.style.transform = 'rotate(-90deg)';
      this.dom.offsetHeight;
      this.dom.classList.add('transitioning');
      return this.dom.style.transform = 'rotate(0deg)';
    };

    SquareView.prototype.refreshDom = function() {
      squareDesigns.setSquare(this.square).addTo(this.dom);
      this.dom.className = 'grid-square';
      return this.dom.classList.add("grid-square-" + this.square.id);
    };

    return SquareView;

  })();

  DIRECTIONS = [[0, -1], [1, 0], [0, 1], [-1, 0]];

  Grid = (function() {
    function Grid(w1, h1, gridParts1) {
      this.w = w1;
      this.h = h1;
      this.gridParts = gridParts1;
    }

    Grid.prototype.getAt = function(x, y) {
      var ref;
      return ((ref = this.gridParts[y]) != null ? ref[x] : void 0) || new Square(0);
    };

    Grid.prototype.getAtToQuad = function(x, y, quad) {
      var offset;
      offset = DIRECTIONS[quad];
      return this.getAt(x + offset[0], y + offset[1]);
    };

    Grid.prototype.checkAll = function() {
      var j, l, p, quad, ref, ref1, square, x, y;
      for (x = j = 0, ref = this.w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = this.h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          square = this.getAt(x, y);
          for (quad = p = 0; p < 4; quad = ++p) {
            if (!square.checkMatch(this.getAtToQuad(x, y, quad), quad)) {
              return false;
            }
          }
        }
      }
      return true;
    };

    return Grid;

  })();

  GridView = (function() {
    function GridView(grid1, interactive) {
      this.grid = grid1;
      this.interactive = interactive;
      this.keydown = bind(this.keydown, this);
      this.isDone = bind(this.isDone, this);
      this.dom = document.createElement('div');
      this.dom.classList.add('grid');
      this.initializeGrid();
      if (this.interactive) {
        this.dom.addEventListener('keydown', this.keydown);
      }
    }

    GridView.prototype.initializeGrid = function() {
      var j, l, ref, ref1, row, squareView, x, y;
      this.dom.innerHTML = '';
      for (y = j = 0, ref = this.grid.h; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
        row = document.createElement('div');
        row.classList.add('grid-row');
        for (x = l = 0, ref1 = this.grid.w; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
          squareView = new SquareView(this.grid.getAt(x, y), this.interactive);
          squareView.addTo(row);
        }
        this.dom.appendChild(row);
      }
    };

    GridView.prototype.isDone = function() {
      return this.grid.checkAll();
    };

    GridView.prototype.keydown = function(event) {
      var pos, ref, res;
      return (ref = ((function() {
        try {
          switch (event.keyCode) {
            case 37:
              return document.activeElement.previousSibling || document.activeElement.parentNode.previousSibling.lastChild;
            case 38:
              res = document.activeElement.parentNode.previousSibling.firstChild;
              pos = document.activeElement.previousSibling;
              while (pos) {
                pos = pos.previousSibling;
                res = res.nextSibling;
              }
              return res;
            case 39:
              return document.activeElement.nextSibling || document.activeElement.parentNode.nextSibling.firstChild;
            case 40:
              res = document.activeElement.parentNode.nextSibling.firstChild;
              pos = document.activeElement.previousSibling;
              while (pos) {
                pos = pos.previousSibling;
                res = res.nextSibling;
              }
              return res;
          }
        } catch (undefined) {}
      })())) != null ? ref.focus() : void 0;
    };

    GridView.prototype.addTo = function(parent) {
      return parent.appendChild(this.dom);
    };

    GridView.prototype.destroy = function() {
      return this.dom.parentNode.removeChild(this.dom);
    };

    return GridView;

  })();

  Levels = (function() {
    var fixedLevels, makeGrid, rand, shuffle;

    function Levels(maxW, maxH, density) {
      this.maxW = maxW;
      this.maxH = maxH;
      this.density = density != null ? density : 0.5;
    }

    Levels.prototype.get = function(level) {
      return fixedLevels[level] || shuffle(this.generateLevel());
    };

    Levels.prototype.generateLevel = function() {
      var grid, h, j, l, len, p, quad, quads, ref, ref1, w, x, y;
      w = rand(5, this.maxW);
      h = rand(5, this.maxH);
      grid = makeGrid(w, h, (function() {
        var j, ref, results;
        results = [];
        for (x = j = 0, ref = w * h; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
          results.push(0);
        }
        return results;
      })());
      for (x = j = 0, ref = w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          quads = [];
          if (x !== w - 1) {
            quads.push(1);
          }
          if (y !== h - 1) {
            quads.push(2);
          }
          for (p = 0, len = quads.length; p < len; p++) {
            quad = quads[p];
            if (Math.random() > (1 - this.density)) {
              grid.getAt(x, y).setQuad(quad);
              grid.getAtToQuad(x, y, quad).setQuad(quad + 2 & 3);
            }
          }
        }
      }
      return grid;
    };

    rand = function(from, to) {
      return Math.floor(Math.random() * (to - from) + from);
    };

    makeGrid = function(w, h, values) {
      var gridParts, myGrid, x, y;
      gridParts = (function() {
        var j, ref, results;
        results = [];
        for (y = j = 0, ref = h; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (x = l = 0, ref1 = w; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
              results1.push(new Square(values[x + y * w]));
            }
            return results1;
          })());
        }
        return results;
      })();
      return myGrid = new Grid(w, h, gridParts);
    };

    shuffle = function(grid) {
      var j, l, ref, ref1, x, y;
      for (x = j = 0, ref = grid.w; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = grid.h; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          grid.getAt(x, y).rotate(rand(0, 4));
        }
      }
      return grid;
    };

    fixedLevels = {
      0: makeGrid(2, 1, [1, 8]),
      1: makeGrid(2, 2, [1, 12, 0, 1]),
      2: makeGrid(3, 2, [6, 14, 12, 3, 14, 9]),
      3: shuffle(makeGrid(3, 2, [1, 10, 2, 8, 5, 4])),
      4: shuffle(makeGrid(6, 6, [0, 0, 6, 12, 0, 0, 0, 4, 5, 7, 8, 0, 6, 11, 15, 15, 10, 12, 3, 10, 15, 15, 14, 9, 0, 2, 13, 5, 1, 0, 0, 0, 3, 9, 0, 0])),
      5: shuffle(makeGrid(4, 5, [0, 6, 12, 0, 0, 5, 5, 0, 0, 5, 5, 0, 6, 13, 7, 12, 3, 9, 3, 9])),
      6: shuffle(makeGrid(6, 6, [0, 0, 6, 12, 0, 0, 0, 4, 7, 13, 4, 0, 6, 11, 15, 15, 11, 12, 3, 14, 15, 15, 14, 9, 0, 1, 7, 13, 1, 0, 0, 0, 3, 9, 0, 0])),
      7: shuffle(makeGrid(8, 6, [4, 4, 6, 10, 10, 10, 10, 12, 5, 5, 5, 6, 10, 10, 12, 5, 5, 5, 5, 1, 2, 12, 5, 5, 5, 5, 3, 8, 4, 5, 5, 5, 5, 3, 10, 10, 9, 5, 5, 5, 3, 10, 10, 10, 10, 9, 1, 1])),
      12: shuffle(makeGrid(5, 9, [4, 6, 10, 10, 12, 1, 5, 6, 14, 9, 6, 13, 5, 1, 0, 7, 11, 13, 2, 1, 5, 4, 5, 6, 12, 7, 14, 15, 6, 8, 7, 6, 14, 11, 13, 5, 5, 2, 3, 13, 1, 3, 8, 3, 9])),
      42: shuffle(makeGrid(6, 5, [4, 0, 4, 6, 10, 12, 5, 0, 5, 1, 0, 5, 3, 10, 13, 6, 10, 9, 0, 0, 5, 5, 0, 4, 0, 0, 1, 3, 10, 9])),
      100: shuffle(makeGrid(5, 3, [4, 6, 12, 6, 12, 5, 5, 5, 5, 5, 1, 3, 9, 3, 9]))
    };

    return Levels;

  })();

  Instructions = (function() {
    var withDashes;

    withDashes = function(string) {
      return "— " + string + " —";
    };

    function Instructions(dom) {
      this.dom = dom;
    }

    Instructions.prototype.start = function(level) {
      return this.setMessage(this.startMessage(level));
    };

    Instructions.prototype.end = function(level) {
      return this.setMessage(this.endMessage(level));
    };

    Instructions.prototype.setMessage = function(m) {
      if (m != null) {
        return this.dom.innerHTML = m;
      }
    };

    Instructions.prototype.startMessage = function(level) {
      switch (level) {
        case 0:
          return null;
        case 1:
          return withDashes("okay, have fun");
        default:
          return "&nbsp;";
      }
    };

    Instructions.prototype.endMessage = function(level) {
      switch (level) {
        case 0:
          return withDashes("now click anywhere to start the next level");
        case 10:
          return withDashes("#10 already, keep up the good work!");
        case 50:
          return withDashes("oh nice! #50");
        case 1337:
          return withDashes("#1337 — 11100010 10011101 10100100");
        default:
          if (("" + level).match(/^10+$/)) {
            return withDashes("congratulations! you reached #" + level);
          } else {
            return withDashes("#" + level);
          }
      }
    };

    return Instructions;

  })();

  Zoo = (function() {
    var doneClass;

    doneClass = 'done';

    function Zoo() {
      this.displayLevel = bind(this.displayLevel, this);
      this.loadLevel = bind(this.loadLevel, this);
      this.clicked = bind(this.clicked, this);
      this.dom = document.createElement('div');
      this.dom.classList.add('zoo');
      document.body.addEventListener('click', this.clicked);
      this.levels = new Levels(13, 9);
      this.level = 0;
      this.instructions = new Instructions(document.getElementById('instructions'));
      this.loadLevel();
    }

    Zoo.prototype.clicked = function() {
      var cL;
      if (this.gridView.isDone()) {
        cL = document.body.classList;
        if (cL.contains(doneClass)) {
          cL.remove('done');
          this.level = this.level + 1;
          this.loadLevel();
          return this.instructions.start(this.level);
        } else {
          cL.add('done');
          this.instructions.end(this.level);
          return this.displayLevel();
        }
      }
    };

    Zoo.prototype.loadLevel = function() {
      var grid, ref;
      if ((ref = this.gridView) != null) {
        ref.destroy();
      }
      grid = this.levels.get(this.level);
      this.gridView = new GridView(grid, true);
      return this.gridView.addTo(this.dom);
    };

    Zoo.prototype.displayLevel = function() {
      var grid;
      grid = this.gridView.grid;
      this.gridView.destroy();
      this.gridView = new GridView(grid, false);
      return this.gridView.addTo(this.dom);
    };

    Zoo.prototype.addTo = function(parent) {
      return parent.appendChild(this.dom);
    };

    return Zoo;

  })();

  zoo = new Zoo();

  zoo.addTo(document.getElementById('jscontainer'));

  console.log(zoo);

}).call(this);
